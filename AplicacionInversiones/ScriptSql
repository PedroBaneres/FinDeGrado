create table users
(
    username      varchar(50)                          not null
        primary key,
    name          varchar(50)                          null,
    surname       varchar(50)                          null,
    mail          varchar(100)                         null,
    password      varchar(50)                          null,
    admin         tinyint(1) default 0                 null,
    creation_date timestamp  default CURRENT_TIMESTAMP null,
    conversation  text                                 null
);

CREATE TABLE transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    source_IBAN VARCHAR(50) NOT NULL,
    destination_IBAN VARCHAR(50),
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10, 2) NOT NULL,
    description TEXT,
    FOREIGN KEY (source_IBAN) REFERENCES accounts(IBAN),
    FOREIGN KEY (destination_IBAN) REFERENCES accounts(IBAN)
);

create table accounts
(
    IBAN     varchar(50)    not null
        primary key,
    username varchar(50)    null,
    saldo    decimal(10, 2) null,
    constraint accounts_ibfk_1
        foreign key (username) references users (username)
);

create index username
    on accounts (username);

create
    definer = admin00@`%` procedure insert_account(IN p_username varchar(255), IN p_saldo decimal(10, 2))
BEGIN
    DECLARE next_number INT;
    DECLARE next_iban VARCHAR(20);

    -- Obtener el último IBAN insertado, si existe
    SELECT SUBSTRING(IBAN, 6) INTO next_number FROM Bank.accounts ORDER BY IBAN DESC LIMIT 1;

    -- Generar el próximo IBAN
    IF next_number IS NOT NULL THEN
        SET next_number = next_number + 1;
        SET next_iban = CONCAT('ES-', LPAD(next_number, 6, '0'));
    ELSE
        SET next_iban = 'ES-000001'; -- Si no hay registros, empezamos desde 1
    END IF;

    -- Insertar el nuevo registro
    INSERT INTO Bank.accounts (IBAN, username, saldo) VALUES (next_iban, p_username, p_saldo);

    SELECT CONCAT('Nuevo registro insertado con IBAN: ', next_iban) AS message;
END;

